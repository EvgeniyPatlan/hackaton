// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  String    @id @default(uuid()) @db.Uuid
  email               String    @unique
  fullName            String    @map("full_name")
  phone               String?
  roleId              String    @map("role_id") @db.Uuid
  govId               String?   @unique @map("gov_id")
  verificationStatus  String    @default("unverified") @map("verification_status")
  avatarUrl           String?   @map("avatar_url")
  organizationId      String?   @map("organization_id") @db.Uuid
  createdAt           DateTime  @default(now()) @map("created_at")
  updatedAt           DateTime  @default(now()) @updatedAt @map("updated_at")
  lastLoginAt         DateTime? @map("last_login_at")
  isActive            Boolean   @default(true) @map("is_active")
  passwordHash        String    @map("password_hash")

  role                Role      @relation(fields: [roleId], references: [id])
  organization        Organization? @relation(fields: [organizationId], references: [id])
  refreshTokens       RefreshToken[]

  @@map("users")
}

model Role {
  id          String   @id @default(uuid()) @db.Uuid
  name        String   @unique
  description String?
  permissions Json?
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @default(now()) @updatedAt @map("updated_at")
  
  users       User[]

  @@map("roles")
}

model Organization {
  id                     String   @id @default(uuid()) @db.Uuid
  name                   String
  type                   String
  edrpou                 String?  @unique
  website                String?
  isVerified             Boolean  @default(false) @map("is_verified")
  verificationDocumentUrl String? @map("verification_document_url")
  createdAt              DateTime @default(now()) @map("created_at")
  updatedAt              DateTime @default(now()) @updatedAt @map("updated_at")
  
  users                  User[]

  @@map("organizations")
}

model RefreshToken {
  id        String   @id @default(uuid()) @db.Uuid
  token     String   @unique
  userId    String   @map("user_id") @db.Uuid
  expiresAt DateTime @map("expires_at")
  createdAt DateTime @default(now()) @map("created_at")
  
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("refresh_tokens")
}